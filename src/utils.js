import adjectives from './assets/adjectives.json';
import animals from './assets/animals.json';
import gameIDWords from './assets/game-id-words.json';

import { getGame } from './firebase';

export function getRandomIntIncl(minVal, maxVal, randFunc = Math.random) {
  return Math.floor(randFunc() * (maxVal - minVal + 1)) + minVal;
}

function distance(x1, y1, x2, y2) {
  return Math.sqrt( (x1 - x2)**2 + (y1 - y2)**2 );
}

export function checkCollision(dice, radius, xPosNew, yPosNew) {
  return dice.every(dice =>
    distance(dice.xPos, dice.yPos, xPosNew, yPosNew) > radius);
}

export const tileValuesAll = [...Array(16).keys()].map(i => i + 21);

export function getWormValue(tileValue) {
  return Math.floor((tileValue - 21) / 4) + 1
}

export function getWormScore(tileVals) {
  return tileVals.reduce( (acc, curr) => acc + getWormValue(curr), 0);
}

export function getWinnerIndex(players) {
  const wormScores = players.map(player => getWormScore(player.tiles));
  const winnerWormScore = Math.max(...wormScores);
  const winnerIndices = wormScores.reduce((acc, curr, index) => {
      if (curr === winnerWormScore) acc.push(index);
      return acc;
    }, []);
  if (winnerIndices.length === 1) {
    return wormScores.indexOf(winnerWormScore);
  } else {
    const winnerHighTiles = winnerIndices.map(index =>
      Math.max(...players[index].tiles));
    return winnerIndices[
        winnerHighTiles.indexOf(Math.max(...winnerHighTiles))
      ];
  }
}

export async function generateGameName() {
  const attemptsPerWordCount = 5;
  
	for (let iAttempt = 1; ; iAttempt++) {
    const wordCount = 2 + Math.floor(iAttempt / attemptsPerWordCount);

		let words = [];
		for (let iWord = 0; iWord < wordCount; iWord++) {
			const word = gameIDWords[getRandomIntIncl(0, gameIDWords.length-1)];
			words.push(word);
		}

    const autogeneratedGameName = words.join('-');

    const game = await getGame(autogeneratedGameName);
    if (!game.exists) return autogeneratedGameName;
  }
}

function capitalizeFirstLetter(string) {
  return string.charAt(0).toUpperCase() + string.slice(1);
}

export function generateUserName() {
  const adjective = adjectives[getRandomIntIncl(0, adjectives.length-1)];
  const animal = animals[getRandomIntIncl(0, animals.length-1)];
  return `${capitalizeFirstLetter(adjective)} ${capitalizeFirstLetter(animal)}`;
}

export async function getFlagUrl() {
  const countryName = await getCountryName();
  const flagURL = await getFlagUrlFromCountryName(countryName);
  return flagURL
}

async function getCountryName() {
  try {
    const url = 'https://ipgeolocation.com/?json=1';
    const res = await fetch(url);
    const data = await res.json();
    const countryName = data.country;
    return countryName;
  } catch(err) {
    console.log(err);
    return 'Antarctica';
  }
}

export async function getFlagUrlFromCountryName(countryName) {
  try {
    const url = `https://restcountries.eu/rest/v2/name/${countryName}`;
    const res = await fetch(url);
    const data = await res.json();
    return data[0].flag;
  } catch(err) {
    return 'https://restcountries.eu/data/ata.svg';
  }
}
